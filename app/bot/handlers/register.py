from typing import Any

from aiogram_dialog.widgets.markup.reply_keyboard import ReplyKeyboardFactory
from email_validator import validate_email, EmailNotValidError
from aiogram.enums import ContentType
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Select, RequestLocation, RequestContact, Next, Button, Row, SwitchTo
from aiogram_dialog.widgets.kbd.select import OnItemClick, Radio, Multiselect
from aiogram_dialog.widgets.text import Const, Format

from app.bot.states.form import Form
from app.types.confirms import Confirms
from app.types.specialities import Specialities


class OnSelectHostel(OnItemClick[Any, Confirms]):
    async def __call__(self, event: CallbackQuery, select: Any, dialog_manager: DialogManager, data: Confirms) -> None:
        dialog_manager.dialog_data["hostel"] = data
        await dialog_manager.next()


class OnSelectEdbo(OnItemClick[Any, Confirms]):
    async def __call__(self, event: CallbackQuery, select: Any, dialog_manager: DialogManager, data: Confirms) -> None:
        dialog_manager.dialog_data["edbo"] = data
        await dialog_manager.next()


async def specialty_handler(event: CallbackQuery, button: Button, dialog_manager: DialogManager) -> None:
    specialities = dialog_manager.find("specialty").get_checked()
    if len(specialities) == 0:
        await event.answer("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞–± –æ–¥–Ω—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å")
    else:
        dialog_manager.dialog_data["specialities"] = ", ".join(specialities)
        await dialog_manager.switch_to(Form.contact)


async def email_handler(message: Message, message_input: MessageInput, manager: DialogManager) -> None:
    try:
        validate_email(message.text)
    except EmailNotValidError as e:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –ø–æ—à—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
    else:
        await manager.next()


async def location_handler(message: Message, message_input: MessageInput, manager: DialogManager) -> None:
    print(message.location)
    await manager.next()


async def contact_handler(message: Message, message_input: MessageInput, manager: DialogManager) -> None:
    manager.dialog_data["phone"] = message.contact.phone_number
    await manager.next()


async def get_data(dialog_manager: DialogManager, **kwargs):
    print(kwargs)
    return dialog_manager.dialog_data


confirm_form_message = Format("""
–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ
        
<b>–ß–∏ –ø–ª–∞–Ω—É—î—Ç–µ –≤–∏ —Å–µ–ª–∏—Ç–∏—Å—è —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É?</b> <code>{hostel}</code>
<b>–ß–∏ —î —É –≤–∞—Å —Ä–æ–∑–¥—Ä—É–∫–æ–≤–∞–Ω–∞ –∑–∞—è–≤–∞ –∑ –Ñ–î–ï–ë–û?</b> <code>{edbo}</code>
<b>–û–±—Ä–∞–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ:</b> <code>{specialities}</code>
<b>–¢–µ–ª–µ—Ñ–æ–Ω</b> <code>{phone}</code>
""")

form = Dialog(
    Window(
        Const("–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—Ç—É –∑ —è–∫–æ—é –≤–∏ —Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è –Ω–∞ —Å–∞–π—Ç—ñ"),
        MessageInput(email_handler, content_types=[ContentType.TEXT]),
        state=Form.email
    ),
    Window(
        Const("–ß–∏ –ø–ª–∞–Ω—É—î—Ç–µ –≤–∏ —Å–µ–ª–∏—Ç–∏—Å—è —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É?"),
        Select(
            text=Format("{item.value}"),
            items=list(Confirms),
            item_id_getter=lambda x: x.value,
            on_click=OnSelectHostel(),
            id="hostel"
        ),
        state=Form.hostel
    ),
    Window(
        Const("–ß–∏ —î —É –≤–∞—Å —Ä–æ–∑–¥—Ä—É–∫–æ–≤–∞–Ω–∞ –∑–∞—è–≤–∞ –∑ –Ñ–î–ï–ë–û?"),
        Select(
            text=Format("{item.value}"),
            items=list(Confirms),
            item_id_getter=lambda x: x.value,
            on_click=OnSelectEdbo(),
            id="edbo"
        ),
        state=Form.edbo
    ),
    Window(
        Const("–û–±–µ—Ä—ñ—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞ —è–∫—ñ –ø–ª–∞–Ω—É—î—Ç–µ –≤—Å—Ç—É–ø–∞—Ç–∏"),
        Multiselect(
            checked_text=Format("‚úì {item.value}"),
            unchecked_text=Format("{item.value}"),
            items=list(Specialities),
            item_id_getter=lambda x: x.value,
            id="specialty"
        ),
        Button(
            Const("–î–∞–ª—ñ"),
            on_click=specialty_handler,
            id="specialty_next"
        ),
        state=Form.speciality
    ),
    Window(
        Const("–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
        RequestContact(Const("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏")),
        MessageInput(contact_handler, content_types=[ContentType.CONTACT]),
        markup_factory=ReplyKeyboardFactory(
            resize_keyboard=True,
        ),
        state=Form.contact
    ),
    Window(
        confirm_form_message,
        Row(
            SwitchTo(
                text=Const("–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —â–µ —Ä–∞–∑"),
                id="resetform",
                state=Form.hostel
            ),
            Next(Const("–í—Å–µ –≤—ñ—Ä–Ω–æ"))
        ),
        getter=get_data,
        state=Form.confirm
    ),
    Window(
        Const("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é"),
        RequestLocation(Const("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏")),
        MessageInput(location_handler, content_types=[ContentType.LOCATION]),
        markup_factory=ReplyKeyboardFactory(
            resize_keyboard=True,
        ),
        state=Form.geo
    )
)
